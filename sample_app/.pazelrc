"""Define pazel extensions for this directory and its subdirectories."""

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import os
import re

from pazel.bazel_rules import BazelRule


HEADER = """package(default_visibility = ["//visibility:public"])

"""

FOOTER = """# My footer"""

# Template will be filled and used to generate BUILD files.
PY_DOCTEST_TEMPLATE = """py_doctest(
    "{name}",
    "{name}.py",
    deps = [{deps}],
    {data}
)"""

class PyDoctestRule(BazelRule):
    """Class for representing custom Bazel rule py_doctest as defined in custom_rules.bzl.

    Note that custom rules need to implement the interface defined by BazelRule.
    """

    # Required class variables.
    is_test_rule = True     # Is this a test rule?
    template = PY_DOCTEST_TEMPLATE  # Filled version of this will be written to the BUILD file.
    rule_identifier = 'py_doctest'  # The name of the rule.
    replaces_rules = ['py_binary']

    @staticmethod
    def applies_to(script_name, script_source):
        """Check whether py_doctest rule should be used for the given script.

        Args:
            script_name (str): Name of a Python script without the .py suffix.
            script_source (str): Source code of the script.

        Returns:
            applies (bool): Whether py_doctest should be used to represent the script.
        """
        imports_doctest = re.findall('import doctest', script_source)

        return imports_doctest

    @staticmethod
    def get_load_statement():
        """Return the load statement required for using this rule."""
        return 'load("//:custom_rules.bzl", "py_doctest")'


class LocalImportAllInferenceRule(object):
    """Import inference rule for "from some_local_package import *" type of imports.

    The rule is not recursive so only modules in the first level will be imported.
    """

    @staticmethod
    def holds(project_root, base, unknown):
        """Check if base is a local package and unknown is '*'.

        Args:
            project_root (str): Local imports are assumed to be relative to this path.
            base (str): Name of a package or a module.
            unknown (str): Can be a package, module, function or any other object.

        Returns:
            packages (None): The rule applies only to modules.
            modules (list of str or None): The imported modules. None if the rule does not match.
        """
        packages = None
        modules = None

        # Check if 'base' is a local package.
        package_path = os.path.join(project_root, base.replace('.', '/'))
        base_is_package = os.path.isdir(package_path)

        if base_is_package and unknown == '*':
            python_filenames = [f.replace('.py', '') for f in os.listdir(package_path)
                                if f.endswith('.py')]

            modules = []

            for python_filename in python_filenames:
                dotted_path = base + '.%s' % python_filename
                modules.append(dotted_path)

        return packages, modules


# Add custom classes implementing BazelRule to this list so that pazel registers them.
EXTRA_BAZEL_RULES = [PyDoctestRule]

# Add custom import inference classes implementing ImportInferenceRule to this list.
EXTRA_IMPORT_INFERENCE_RULES = [LocalImportAllInferenceRule]

# Map import name to pip install name, if they differ.
EXTRA_IMPORT_NAME_TO_PIP_NAME = {'yaml': 'pyyaml'}

# Map local package import name to its Bazel dependency.
EXTRA_LOCAL_IMPORT_NAME_TO_DEP = {'my_dummy_package': '//my_dummy_package'}

# Change 'REQUIREMENT' to override the default load statement of the Bazel rule for
# installing pip packages. See https://github.com/bazelbuild/rules_python
REQUIREMENT = """load("@my_deps//:requirements.bzl", "requirement")"""
